[2021-07-01 14:25:12,447] {taskinstance.py:876} INFO - Dependencies all met for <TaskInstance: get_data_patient.get_users 2021-07-01T14:24:03.261240+00:00 [queued]>
[2021-07-01 14:25:12,461] {taskinstance.py:876} INFO - Dependencies all met for <TaskInstance: get_data_patient.get_users 2021-07-01T14:24:03.261240+00:00 [queued]>
[2021-07-01 14:25:12,461] {taskinstance.py:1067} INFO - 
--------------------------------------------------------------------------------
[2021-07-01 14:25:12,461] {taskinstance.py:1068} INFO - Starting attempt 2 of 2
[2021-07-01 14:25:12,462] {taskinstance.py:1069} INFO - 
--------------------------------------------------------------------------------
[2021-07-01 14:25:12,493] {taskinstance.py:1087} INFO - Executing <Task(PythonOperator): get_users> on 2021-07-01T14:24:03.261240+00:00
[2021-07-01 14:25:12,500] {standard_task_runner.py:52} INFO - Started process 8455 to run task
[2021-07-01 14:25:12,511] {standard_task_runner.py:76} INFO - Running: ['airflow', 'tasks', 'run', 'get_data_patient', 'get_users', '2021-07-01T14:24:03.261240+00:00', '--job-id', '956', '--pool', 'default_pool', '--raw', '--subdir', 'DAGS_FOLDER/get_Data_Patient.py', '--cfg-path', '/tmp/tmpgtgr8yua', '--error-file', '/tmp/tmp0qsa5bvp']
[2021-07-01 14:25:12,513] {standard_task_runner.py:77} INFO - Job 956: Subtask get_users
[2021-07-01 14:25:12,603] {logging_mixin.py:104} INFO - Running <TaskInstance: get_data_patient.get_users 2021-07-01T14:24:03.261240+00:00 [running]> on host airflowvm
[2021-07-01 14:25:12,713] {taskinstance.py:1280} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=airflow
AIRFLOW_CTX_DAG_ID=get_data_patient
AIRFLOW_CTX_TASK_ID=get_users
AIRFLOW_CTX_EXECUTION_DATE=2021-07-01T14:24:03.261240+00:00
AIRFLOW_CTX_DAG_RUN_ID=manual__2021-07-01T14:24:03.261240+00:00
[2021-07-01 14:25:12,727] {base.py:69} INFO - Using connection to: id: ***_default. Host: localhost, Port: 5432, Schema: , Login: ***, Password: ***, extra: {'cursor': 'realdictcursor'}
[2021-07-01 14:25:12,738] {logging_mixin.py:104} INFO - [RealDictRow([('id', 4718), ('uid', '404d86a4-6138-4d86-87ed-5efbc2561cf9'), ('medical_history', {}), ('user_id', '502c3cfb-2b79-4131-ad46-722e2d470a3b'), ('birthdate', datetime.date(1930, 8, 1)), ('sex', 'M'), ('created_at', datetime.datetime(2021, 3, 30, 9, 50, 38, 662702, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 865377, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4727), ('uid', '57fc6ce3-5c5f-4811-b978-e58782716cda'), ('medical_history', {}), ('user_id', '6a202726-9d80-46ac-9ff0-edd0940ea479'), ('birthdate', datetime.date(1947, 3, 15)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 30, 18, 14, 20, 305891, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 869450, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4732), ('uid', '23576b5e-afef-4e81-a396-9231fd78ae6c'), ('medical_history', {}), ('user_id', 'a8dc27dc-ac02-402d-bb4a-895da7bc5543'), ('birthdate', datetime.date(1946, 10, 5)), ('sex', 'M'), ('created_at', datetime.datetime(2021, 3, 31, 8, 21, 9, 704906, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 873161, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4739), ('uid', '86c2100e-8c6b-4f65-b71d-1b4812d0b262'), ('medical_history', {}), ('user_id', '81860237-d923-473c-8729-cb3027e729d1'), ('birthdate', datetime.date(1949, 12, 28)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 10, 52, 0, 988411, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 877064, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4738), ('uid', '0adbe01a-bd30-451c-8c0b-b56703d65c10'), ('medical_history', {}), ('user_id', 'd65f04b3-e18f-4f98-a756-70c89bdf9e3c'), ('birthdate', datetime.date(1935, 6, 24)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 10, 29, 30, 379960, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 880377, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4744), ('uid', 'e0981e7b-fc73-4236-ab2b-1bc0da484f31'), ('medical_history', {}), ('user_id', 'cf792456-cb73-4641-9d22-a98b3b61feae'), ('birthdate', datetime.date(1941, 1, 4)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 13, 37, 56, 774899, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 883586, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4742), ('uid', '11fd8c09-4bf6-4564-84e3-b3c39a47ed2a'), ('medical_history', {}), ('user_id', '96b2e81d-9cc1-45f2-9740-f2b13d95d5d0'), ('birthdate', datetime.date(1946, 2, 20)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 13, 13, 13, 696191, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 887312, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4733), ('uid', '43525ce5-fc52-41e3-89a4-edd9cd1c80fa'), ('medical_history', {}), ('user_id', 'b9259b88-9f8e-4bc2-b9f6-394c411056c7'), ('birthdate', datetime.date(1944, 5, 12)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 8, 46, 5, 483484, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 890677, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4743), ('uid', '638bd5f6-9abc-42fc-8a35-d96f174442ba'), ('medical_history', {}), ('user_id', '050e7230-7e00-49b5-95b4-845c19c244af'), ('birthdate', datetime.date(1942, 12, 13)), ('sex', 'F'), ('created_at', datetime.datetime(2021, 3, 31, 13, 27, 18, 446598, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 894036, tzinfo=datetime.timezone.utc)), ('is_test', False)]), RealDictRow([('id', 4749), ('uid', 'da035b9c-6113-4d07-9a99-317ee37cc1af'), ('medical_history', {}), ('user_id', '0b460a9d-7ef6-4a56-8454-1922edee7735'), ('birthdate', datetime.date(1938, 11, 20)), ('sex', 'M'), ('created_at', datetime.datetime(2021, 4, 1, 8, 41, 16, 800191, tzinfo=datetime.timezone.utc)), ('deleted_at', None), ('updated_at', datetime.datetime(2021, 4, 12, 16, 55, 42, 897591, tzinfo=datetime.timezone.utc)), ('is_test', False)])]
[2021-07-01 14:25:12,738] {python.py:151} INFO - Done. Returned value was: [{'id': 4718, 'uid': '404d86a4-6138-4d86-87ed-5efbc2561cf9', 'medical_history': {}, 'user_id': '502c3cfb-2b79-4131-ad46-722e2d470a3b', 'birthdate': datetime.date(1930, 8, 1), 'sex': 'M', 'created_at': datetime.datetime(2021, 3, 30, 9, 50, 38, 662702, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 865377, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4727, 'uid': '57fc6ce3-5c5f-4811-b978-e58782716cda', 'medical_history': {}, 'user_id': '6a202726-9d80-46ac-9ff0-edd0940ea479', 'birthdate': datetime.date(1947, 3, 15), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 30, 18, 14, 20, 305891, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 869450, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4732, 'uid': '23576b5e-afef-4e81-a396-9231fd78ae6c', 'medical_history': {}, 'user_id': 'a8dc27dc-ac02-402d-bb4a-895da7bc5543', 'birthdate': datetime.date(1946, 10, 5), 'sex': 'M', 'created_at': datetime.datetime(2021, 3, 31, 8, 21, 9, 704906, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 873161, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4739, 'uid': '86c2100e-8c6b-4f65-b71d-1b4812d0b262', 'medical_history': {}, 'user_id': '81860237-d923-473c-8729-cb3027e729d1', 'birthdate': datetime.date(1949, 12, 28), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 10, 52, 0, 988411, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 877064, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4738, 'uid': '0adbe01a-bd30-451c-8c0b-b56703d65c10', 'medical_history': {}, 'user_id': 'd65f04b3-e18f-4f98-a756-70c89bdf9e3c', 'birthdate': datetime.date(1935, 6, 24), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 10, 29, 30, 379960, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 880377, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4744, 'uid': 'e0981e7b-fc73-4236-ab2b-1bc0da484f31', 'medical_history': {}, 'user_id': 'cf792456-cb73-4641-9d22-a98b3b61feae', 'birthdate': datetime.date(1941, 1, 4), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 13, 37, 56, 774899, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 883586, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4742, 'uid': '11fd8c09-4bf6-4564-84e3-b3c39a47ed2a', 'medical_history': {}, 'user_id': '96b2e81d-9cc1-45f2-9740-f2b13d95d5d0', 'birthdate': datetime.date(1946, 2, 20), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 13, 13, 13, 696191, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 887312, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4733, 'uid': '43525ce5-fc52-41e3-89a4-edd9cd1c80fa', 'medical_history': {}, 'user_id': 'b9259b88-9f8e-4bc2-b9f6-394c411056c7', 'birthdate': datetime.date(1944, 5, 12), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 8, 46, 5, 483484, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 890677, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4743, 'uid': '638bd5f6-9abc-42fc-8a35-d96f174442ba', 'medical_history': {}, 'user_id': '050e7230-7e00-49b5-95b4-845c19c244af', 'birthdate': datetime.date(1942, 12, 13), 'sex': 'F', 'created_at': datetime.datetime(2021, 3, 31, 13, 27, 18, 446598, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 894036, tzinfo=datetime.timezone.utc), 'is_test': False}, {'id': 4749, 'uid': 'da035b9c-6113-4d07-9a99-317ee37cc1af', 'medical_history': {}, 'user_id': '0b460a9d-7ef6-4a56-8454-1922edee7735', 'birthdate': datetime.date(1938, 11, 20), 'sex': 'M', 'created_at': datetime.datetime(2021, 4, 1, 8, 41, 16, 800191, tzinfo=datetime.timezone.utc), 'deleted_at': None, 'updated_at': datetime.datetime(2021, 4, 12, 16, 55, 42, 897591, tzinfo=datetime.timezone.utc), 'is_test': False}]
[2021-07-01 14:25:12,741] {xcom.py:228} ERROR - Could not serialize the XCom value into JSON. If you are using pickle instead of JSON for XCom, then you need to enable pickle support for XCom in your airflow config.
[2021-07-01 14:25:12,741] {taskinstance.py:1481} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 1137, in _run_raw_task
    self._prepare_and_execute_task_with_callbacks(context, task)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 1311, in _prepare_and_execute_task_with_callbacks
    result = self._execute_task(context, task_copy)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 1344, in _execute_task
    self.xcom_push(key=XCOM_RETURN_KEY, value=result)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/utils/session.py", line 70, in wrapper
    return func(*args, session=session, **kwargs)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/taskinstance.py", line 1919, in xcom_push
    XCom.set(
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/utils/session.py", line 67, in wrapper
    return func(*args, **kwargs)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/xcom.py", line 79, in set
    value = XCom.serialize_value(value)
  File "/home/airflow/sandbox/lib/python3.8/site-packages/airflow/models/xcom.py", line 226, in serialize_value
    return json.dumps(value).encode('UTF-8')
  File "/usr/lib/python3.8/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/usr/lib/python3.8/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python3.8/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/usr/lib/python3.8/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type date is not JSON serializable
[2021-07-01 14:25:12,746] {taskinstance.py:1524} INFO - Marking task as FAILED. dag_id=get_data_patient, task_id=get_users, execution_date=20210701T142403, start_date=20210701T142512, end_date=20210701T142512
[2021-07-01 14:25:12,804] {local_task_job.py:151} INFO - Task exited with return code 1
